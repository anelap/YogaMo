@model SalesReportVM
@{
    ViewData["Title"] = "Sales reports";
}

<div class="row">
    <div class="col-lg-3 col-md-6">
        <div class="panel panel-primary">
            <div class="panel-heading">
                <div class="row">
                    <div class="w-25">
                        <i class="fa fa-users fa-5x"></i>
                    </div>
                    <div class="w-75 text-right">
                        <div class="huge">@Model.TotalClients</div>
                        <div>Clients</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-3 col-md-6">
        <div class="panel panel-green">
            <div class="panel-heading">
                <div class="row">
                    <div class="w-25">
                        <i class="fa fa-money-bill-wave fa-5x"></i>
                    </div>
                    <div class="w-75 text-right">
                        <div class="huge">$@Model.TotalRevenue.ToString("0.00")</div>
                        <div>Total Revenue</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-3 col-md-6">
        <div class="panel panel-yellow">
            <div class="panel-heading">
                <div class="row">
                    <div class="w-25">
                        <i class="fa fa-shopping-cart fa-5x"></i>
                    </div>
                    <div class="w-75 text-right">
                        <div class="huge">@Model.TotalOrders</div>
                        <div>Orders</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-3 col-md-6">
        <div class="panel panel-red">
            <div class="panel-heading">
                <div class="row">
                    <div class="w-25">
                        <i class="fa fa-tshirt fa-5x"></i>
                    </div>
                    <div class="w-75 text-right">
                        <div class="huge">@Model.TotalProductsSold</div>
                        <div>Products sold</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<form>


    <!-- AREA CHART -->
    <div class="row my-3">
        <div class="col-md-6 py-1">
            <div class="card card-primary">
                <div class="card-header">
                    <h3 class="card-title">Weekly Sales Chart</h3>

                    <div class="card-tools">
                        <button type="button" class="btn btn-tool" data-card-widget="collapse">
                            <i class="fas fa-minus"></i>
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <canvas id="chLine"></canvas>

                    <input asp-for="Date" type="date" class="form-control" onchange="this.form.submit();" />
                </div>
                <!-- /.card-body -->
            </div>
            <!-- /.card -->

        </div>

        <div class="col-md-6 py-1">
            <div class="card card-primary">
                <div class="card-header">
                    <h3 class="card-title">Monthly Sales Chart by user gender</h3>

                    <div class="card-tools">
                        <button type="button" class="btn btn-tool" data-card-widget="collapse">
                            <i class="fas fa-minus"></i>
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <canvas id="chBar"></canvas>

                    <select asp-items="Model.YearsList" asp-for="Year" onchange="this.form.submit();" class="form-control"></select>
                </div>
                <!-- /.card-body -->
            </div>
            <!-- /.card -->
        </div>

        <div class="col-md-6 py-1">
            <div class="card card-primary">
                <div class="card-header">
                    <h3 class="card-title">Revenue by product category</h3>

                    <div class="card-tools">
                        <button type="button" class="btn btn-tool" data-card-widget="collapse">
                            <i class="fas fa-minus"></i>
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <canvas id="productCategoryRevenue"></canvas>
                </div>
                <!-- /.card-body -->
            </div>
            <!-- /.card -->

        </div>

        <div class="col-md-6 py-1">
            <div class="card card-primary">
                <div class="card-header">
                    <h3 class="card-title">Top 5 products by revenue</h3>

                    <div class="card-tools">
                        <button type="button" class="btn btn-tool" data-card-widget="collapse">
                            <i class="fas fa-minus"></i>
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <canvas id="topProductsChart"></canvas>
                </div>
                <!-- /.card-body -->
            </div>
            <!-- /.card -->

        </div>
    </div>
</form>


<style>
    .panel-yellow {
        border-color: #007bff;
    }

    .panel {
        margin-bottom: 20px;
        background-color: #fff;
        border: 1px solid transparent;
        border-radius: 4px;
        -webkit-box-shadow: 0 1px 1px rgb(0 0 0 / 5%);
        box-shadow: 0 1px 1px rgb(0 0 0 / 5%);
    }

    .panel-yellow > .panel-heading {
        border-color: #007bff;
        color: white;
        background-color: #007bff;
    }

    .panel-heading {
        padding: 10px 15px;
        border-bottom: 1px solid transparent;
        border-top-left-radius: 3px;
        border-top-right-radius: 3px;
    }



    .huge {
        font-size: 40px;
    }


    .panel-green {
        border-color: #5cb85c;
    }

        .panel-green > .panel-heading {
            border-color: #5cb85c;
            color: white;
            background-color: #5cb85c;
        }

        .panel-green > a {
            color: #5cb85c;
        }

            .panel-green > a:hover {
                color: #3d8b3d;
            }

    .panel-red {
        border-color: #d9534f;
    }

        .panel-red > .panel-heading {
            border-color: #d9534f;
            color: white;
            background-color: #d9534f;
        }

        .panel-red > a {
            color: #d9534f;
        }

            .panel-red > a:hover {
                color: #b52b27;
            }

    .panel-yellow {
        border-color: #f0ad4e;
    }

        .panel-yellow > .panel-heading {
            border-color: #f0ad4e;
            color: white;
            background-color: #f0ad4e;
        }

        .panel-yellow > a {
            color: #f0ad4e;
        }

            .panel-yellow > a:hover {
                color: #df8a13;
            }


    .panel-primary {
        border-color: #337ab7
    }

        .panel-primary > .panel-heading {
            color: #fff;
            background-color: #337ab7;
            border-color: #337ab7
        }

            .panel-primary > .panel-heading + .panel-collapse > .panel-body {
                border-top-color: #337ab7
            }

            .panel-primary > .panel-heading .badge {
                color: #337ab7;
                background-color: #fff
            }

        .panel-primary > .panel-footer + .panel-collapse > .panel-body {
            border-bottom-color: #337ab7
        }
</style>

@section Scripts {
    <script type="text/javascript" src="~/js/chartjs/chart.js"></script>
    <script type="text/javascript" src="~/js/chartjs/chartjs-plugin-datalabels.js"></script>

    <script>
    /* chart.js chart examples */

    // chart colors

    var colors = ['#007bff', '#28a745', '#333333', '#c3e6cb', '#dc3545', '#6c757d'];

    /* large line chart */
    var chLine = document.getElementById("chLine");
    var chartData = {
        labels: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.WeekDaysList,
Newtonsoft.Json.Formatting.Indented)),
        datasets: [{
            data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.DailyRevenue,
Newtonsoft.Json.Formatting.Indented)),
            backgroundColor: 'transparent',
            borderColor: colors[0],
            borderWidth: 4,
            pointBackgroundColor: colors[0],
            label: "Sales revenue",
        }
            //   {
            //     data: [639, 465, 493, 478, 589, 632, 674],
            //     backgroundColor: colors[3],
            //     borderColor: colors[1],
            //     borderWidth: 4,
            //     pointBackgroundColor: colors[1]
            //   }
        ]
    };
    if (chLine) {
        new Chart(chLine, {
            type: 'line',
            data: chartData,
            options: {
                scales: {
                    xAxes: [{
                        ticks: {
                            beginAtZero: false
                        }
                    }],
                    yAxes: [{
                        ticks: {
                            beginAtZero: true,
                            max: 10000
                        }
                    }],
                },
                legend: {
                    display: false
                },
                responsive: true
            }
        });
    }

    /* large pie/donut chart */
    var chPie = document.getElementById("chPie");
    if (chPie) {
        new Chart(chPie, {
            type: 'pie',
            data: {
                labels: ['Desktop', 'Phone', 'Tablet', 'Unknown'],
                datasets: [
                    {
                        backgroundColor: [colors[1], colors[0], colors[2], colors[5]],
                        borderWidth: 0,
                        data: [50, 40, 15, 5]
                    }
                ]
            },
            plugins: [{
                beforeDraw: function (chart) {
                    var width = chart.chart.width,
                        height = chart.chart.height,
                        ctx = chart.chart.ctx;
                    ctx.restore();
                    var fontSize = (height / 70).toFixed(2);
                    ctx.font = fontSize + "em sans-serif";
                    ctx.textBaseline = "middle";
                    var text = chart.config.data.datasets[0].data[0] + "%",
                        textX = Math.round((width - ctx.measureText(text).width) / 2),
                        textY = height / 2;
                    ctx.fillText(text, textX, textY);
                    ctx.save();
                }
            }],
            options: { layout: { padding: 0 }, legend: { display: false }, cutoutPercentage: 80 }
        });
    }

    /* bar chart */
    var chBar = document.getElementById("chBar");
    if (chBar) {
        new Chart(chBar, {
            type: 'bar',
            data: {
                labels: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.MonthsList,
Newtonsoft.Json.Formatting.Indented)),
                datasets: [{
                    data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.MonthRevenueMaleUsers,
Newtonsoft.Json.Formatting.Indented)),
                    backgroundColor: colors[0],
                    label: "Revenue from male users"
                },
                {
                    data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.MonthRevenueFemaleUsers,
Newtonsoft.Json.Formatting.Indented)),
                    backgroundColor: colors[1],
                    label: "Revenue from female users"
                }]
            },
            options: {
                legend: {
                    display: false
                },
                scales: {
                    xAxes: [{
                        barPercentage: 0.4,
                        categoryPercentage: 0.5
                    }]
                }
            }
        });
    }

    //pie
    var ctxP = document.getElementById("productCategoryRevenue").getContext('2d');
    var myPieChart = new Chart(ctxP, {
        plugins: [ChartDataLabels],
        type: 'pie',
        data: {
            labels: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.CategoryList,
Newtonsoft.Json.Formatting.Indented)),
            datasets: [{
                data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.RevenuePerCategory,
Newtonsoft.Json.Formatting.Indented)),
                backgroundColor: ["#F7464A", "#46BFBD", "#FDB45C", "#949FB1", "#4D5360"],
                hoverBackgroundColor: ["#FF5A5E", "#5AD3D1", "#FFC870", "#A8B3C5", "#616774"]
            }]
        },
        options: {
            responsive: true,
            legend: {
                position: 'right',
                labels: {
                    padding: 20,
                    boxWidth: 10
                }
            },
            plugins: {
                datalabels: {
                    formatter: (value, ctx) => {
                        let sum = 0;
                        let dataArr = ctx.chart.data.datasets[0].data;
                        dataArr.map(data => {
                            sum += data;
                        });
                        let percentage = (value * 100 / sum).toFixed(2) + "%";
                        return percentage;
                    },
                    color: 'white',
                    labels: {
                        title: {
                            font: {
                                size: '16',
                                weight: 'bold'
                            }
                        }
                    }
                }
            }
        }
    });

    //pie
        var ctxP = document.getElementById("topProductsChart").getContext('2d');
    var myPieChart = new Chart(ctxP, {
        plugins: [ChartDataLabels],
        type: 'pie',
        data: {
            labels: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.ProductNamesList,
Newtonsoft.Json.Formatting.Indented)),
            datasets: [{
                data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.RevenuePerProduct,
Newtonsoft.Json.Formatting.Indented)),
                backgroundColor: ["#F7464A", "#46BFBD", "#FDB45C", "#949FB1", "#4D5360"],
                hoverBackgroundColor: ["#FF5A5E", "#5AD3D1", "#FFC870", "#A8B3C5", "#616774"]
            }]
        },
        options: {
            responsive: true,
            legend: {
                position: 'right',
                labels: {
                    padding: 20,
                    boxWidth: 10
                }
            },
            plugins: {
                datalabels: {
                    formatter: (value, ctx) => {
                        let sum = 0;
                        let dataArr = ctx.chart.data.datasets[0].data;
                        dataArr.map(data => {
                            sum += data;
                        });
                        let percentage = (value * 100 / sum).toFixed(2) + "%";
                        return percentage;
                    },
                    color: 'white',
                    labels: {
                        title: {
                            font: {
                                size: '16',
                                weight: 'bold'
                            }
                        }
                    }
                }
            }
        }
    });
    </script>

    @*<script src="~/plugins/uplot/uPlot.iife.min.js"></script>
        <script>
            $(function () {
                /* uPlot
                 * -------
                 * Here we will create a few charts using uPlot
                 */

                function getSize(elementId) {
                    return {
                        width: document.getElementById(elementId).offsetWidth,
                        height: document.getElementById(elementId).offsetHeight,
                    }
                }

                let data = [
                    [0, 1, 2, 3, 4, 5, 6],
                    [28, 48, 40, 19, 86, 27, 90],
                ];

                //--------------
                //- AREA CHART -
                //--------------

                const optsAreaChart = {
                    ...getSize('areaChart'),
                    scales: {
                        x: {
                            time: false,
                        },
                        y: {
                            range: [0, 100],
                        },
                    },
                    series: [
                        {},
                        {
                            fill: 'rgba(60,141,188,0.7)',
                            stroke: 'rgba(60,141,188,1)',
                        },
                    ],
                };

                let areaChart = new uPlot(optsAreaChart, data, document.getElementById('areaChart'));

                window.addEventListener("resize", e => {
                    areaChart.setSize(getSize('areaChart'));
                });
            })
        </script>*@

}
